#!/usr/bin/php
<?php

use GetOpt\GetOpt;
use GetOpt\Option;
use GetOpt\Command;
use GetOpt\ArgumentException;

require_once __DIR__ . '/vendor/autoload.php';

// TODO - this should come from the Core
define('NAME', 'PHP Network Weathermap');
define('VERSION', '1.0.0');

// PHP Weathermap 0.98
// Copyright Howard Jones, 2005-2016 howie@thingy.com
// http://www.network-weathermap.com/
// Released under the GNU Public License
//require_once 'Console/Getopt.php';

//if (!wm_module_checks()) {
//    die("Quitting: Module checks failed.\n");
//}

$getOpt = new \GetOpt\GetOpt(null, [\GetOpt\GetOpt::SETTING_STRICT_OPERANDS => true]);

$getOpt->addOptions(array(
        Option::create(null, 'version', GetOpt::NO_ARGUMENT)
            ->setDescription('Show version info and quit'),
        Option::create('h', 'help', GetOpt::NO_ARGUMENT)
            ->setDescription('Show this help and quit'),

        Option::create(null, 'config', GetOpt::REQUIRED_ARGUMENT)
            ->setDescription('filename to read from. Default weathermap.conf')
            ->setArgumentName('filename')
            ->setDefaultValue('weathermap.conf'),
        Option::create(null, 'output', GetOpt::REQUIRED_ARGUMENT)
            ->setDescription('filename to write image. Default weathermap.png')
            ->setArgumentName('filename')
            ->setDefaultValue('weathermap.png'),
        Option::create(null, 'htmloutput', GetOpt::REQUIRED_ARGUMENT)
            ->setDescription('filename to write HTML. Default weathermap.html')
            ->setArgumentName('filename')
            ->setDefaultValue('weathermap.html'),

        Option::create(null, 'image-uri', GetOpt::REQUIRED_ARGUMENT)
            ->setArgumentName('uri')
            ->setDescription('URI to prefix <img> tags in HTML output'),

        Option::create(null, 'define', GetOpt::MULTIPLE_ARGUMENT)
            ->setArgumentName('name=value')
            ->setDescription('Define internal variables (equivalent to global SET in config file)'),
        Option::create(null, 'stats', GetOpt::NO_ARGUMENT)
            ->setDescription('produce statistics for map after completion'),

        Option::create(null, 'bulge', GetOpt::NO_ARGUMENT)
            ->setDescription('Enable link-bulging mode. See manual.'),
        Option::create(null, 'no-data', GetOpt::NO_ARGUMENT)
            ->setDescription('skip the data-reading process (just a \'grey\' map)'),
        Option::create(null, 'randomdata', GetOpt::NO_ARGUMENT)
            ->setDescription('skip the data-reading process, generate random data'),

        Option::create(null, 'debug', GetOpt::NO_ARGUMENT)
            ->setDescription('produce (LOTS) of debugging information during run'),
        Option::create(null, 'no-warn', GetOpt::REQUIRED_ARGUMENT)
            ->setDescription('suppress warnings with listed errorcodes (comma-separated)')
            ->setArgumentName('WMxxx_errorcode'),
        Option::create(null, 'dump-after', GetOpt::NO_ARGUMENT)
            ->setDescription('(development) dump all internal PHP structures (HUGE)'),
        Option::create(null, 'uberdebug', GetOpt::NO_ARGUMENT)
            ->setDescription('produce even more debug information'),
        Option::create(null, 'setdebug', GetOpt::NO_ARGUMENT)
            ->setDescription('produce debug information related to map variables (SET)'),

        Option::create(null, 'dump-config', GetOpt::REQUIRED_ARGUMENT)
            ->setArgumentName('filename')
            ->setDescription('(development) dump config to a new file (testing editor)'),
        Option::create(null, 'dump-json', GetOpt::REQUIRED_ARGUMENT)
            ->setArgumentName('filename')
            ->setDescription('(development) dump JSON config to a new file'),


    )
);

// process arguments and catch user errors
try {
    $getOpt->process();
} catch (ArgumentException $exception) {
    file_put_contents('php://stderr', $exception->getMessage() . PHP_EOL);
    echo PHP_EOL . $getOpt->getHelpText();
    exit;
}

// show version and quit
if ($getOpt->getOption('version')) {
    echo sprintf('%s: %s' . PHP_EOL, NAME, VERSION);
    exit;
}

// show help and quit
if ($getOpt->getOption('help')) {
    echo $getOpt->getHelpText();
    exit;
}

print_r($getOpt->getOptions());

print $getOpt->getOption('bulge');

$options_output = array();

$configfile = $getOpt->getOption('config');
$htmlfile = $getOpt->getOption('htmloutput');
$imagefile = $getOpt->getOption('output');
$options_output['imageuri'] = $getOpt->getOption('image-uri');

if ($getOpt->getOption('bulge') === 1) {
    $options_output['widthmod'] = true;
}
if ($getOpt->getOption('sizedebug') === 1) {
    $options_output['sizedebug'] = true;
}
if ($getOpt->getOption('no-data') === 1) {
    $options_output['sizedebug'] = true;
}
if ($getOpt->getOption('debug') === 1) {
    $options_output['debugging'] = true;
}
if ($getOpt->getOption('uberdebug') === 1) {
    $options_output['debugging'] = true;
    // allow ALL trace messages (normally we block some of the chatty ones)
    $weathermap_debug_suppress = array();
}

if ($getOpt->getOption('no-warn') != '') {
    // allow disabling of warnings from the command-line, too (mainly for the rrdtool warning)
    $suppress_warnings = explode(",", $getOpt->getOption('no-warn'));
    foreach ($suppress_warnings as $s) {
        $weathermap_error_suppress[] = strtoupper($s);
    }
}

$define_array = $getOpt->getOption('define');
foreach ($define_array as $define) {
    preg_match("/^([^=]+)=(.*)\s*$/", $define, $matches);
    if (isset($matches[2])) {
        $varname = $matches[1];
        $value = $matches[2];
        wm_debug(">> $varname = '$value'\n");
        // save this for later, so that when the map object exists, it can be defined
        $defines[$varname] = $value;
    } else {
        print "WARNING: --define format is:  --define name=value\n";
    }
}

// set this BEFORE we create the map object, so we get the debug output from Reset(), as well
if (isset($options_output['debugging']) && $options_output['debugging']) {
    $weathermap_debugging = true;

    $weathermap_debugging = true;
    // enable assertion handling
    assert_options(ASSERT_ACTIVE, 1);
    assert_options(ASSERT_WARNING, 0);
    assert_options(ASSERT_QUIET_EVAL, 1);

    // Set up the callback
    assert_options(ASSERT_CALLBACK, 'my_assert_handler');

    wm_debug("------------------------------------\n");
    wm_debug("Starting PHP-Weathermap run, with config: $configfile\n");
    wm_debug("------------------------------------\n");
}

exit();

$output = "html";
$configfile = "weathermap.conf";
$htmlfile = '';
$imagefile = '';
$dumpafter = 0;
$dumpstats = 0;
$randomdata = 0;
$setdebug = false;
$dumpconfig = '';
$dumpjson = '';
$defines = array();

// **************************************************************************************
// THIS IS THE ONE LINE IN HERE YOU MIGHT HAVE TO CHANGE!
$rrdtool = "/usr/bin/rrdtool";
// (on Windows, use / instead of \ in pathnames - c:/rrdtool/bin/rrdtool.exe for example)
// **************************************************************************************

// initialize object
$cg = new Console_Getopt();
$short_opts = '';
$long_opts = array
(
    "version",
    "help",
    "image-uri=",
    "config=",
    "output=",
    "debug",
    "uberdebug",
    "stats",
    "define=",
    "no-data",
    "no-warn=",
    "randomdata",
    "htmloutput=",
    "dumpafter",
    "dumpjson=",
    "bulge",
    "sizedebug",
    "setdebug",
    "dumpconfig="
);

$args = $cg->readPHPArgv();

$ret = $cg->getopt($args, $short_opts, $long_opts);

$pear = new PEAR;
if ($pear->isError($ret)) {
    die("Error in command line: " . $ret->getMessage() . "\n (try --help)\n");
}

$gopts = $ret[0];

$options_output = array();

if (sizeof($gopts) > 0) {
    foreach ($gopts as $o) {
        switch ($o[0]) {
            case '--randomdata':
                $randomdata = 1;
                break;

            case '--define':
                preg_match("/^([^=]+)=(.*)\s*$/", $o[1], $matches);
                if (isset($matches[2])) {
                    $varname = $matches[1];
                    $value = $matches[2];
                    wm_debug(">> $varname = '$value'\n");
                    // save this for later, so that when the map object exists, it can be defined
                    $defines[$varname] = $value;
                } else {
                    print "WARNING: --define format is:  --define name=value\n";
                }
                break;

        }
    }
}

// set this BEFORE we create the map object, so we get the debug output from Reset(), as well
if (isset($options_output['debugging']) && $options_output['debugging']) {
    $weathermap_debugging = true;
    wm_debug("------------------------------------\n");
    wm_debug("Starting PHP-Weathermap run, with config: $configfile\n");
    wm_debug("------------------------------------\n");
}

$map = new Weathermap;
$map->rrdtool = $rrdtool;
$map->context = "cli";

// now stuff in all the others, that we got from getopts
foreach ($options_output as $key => $value) {
    $map->$key = $value;
    // $map->add_hint($key,$value);
}

$weathermap_map = $configfile;

if ($map->ReadConfig($configfile)) {
    // allow command-lines to override the config file, but provide a default if neither are present
    if ($imagefile == '') {
        if ($map->imageoutputfile == '') {
            $imagefile = "weathermap.png";
        } else {
            $imagefile = $map->imageoutputfile;
        }
    }

    if ($htmlfile == '') {
        if ($map->htmloutputfile != '') {
            $htmlfile = $map->htmloutputfile;
        }
    }

    // feed in any command-line defaults, so that they appear as if SET lines in the config

    // XXX FIXME
    foreach ($defines as $hintname => $hint) {
        $map->add_hint($hintname, $hint);
    }

    // now stuff in all the others, that we got from getopts
    foreach ($options_output as $key => $value) {
        // $map->$key = $value;
        $map->add_hint($key, $value);
    }

    if ((isset($options_output['sizedebug']) && !$options_output['sizedebug']) || (!isset($options_output['sizedebug']))) {
        if ($randomdata == 1) {
            $map->randomData();
        } else {
            $map->ReadData();
        }
    }

    if ($imagefile != '') {
        $map->DrawMap($imagefile);
        $map->imagefile = $imagefile;
    }

    if ($htmlfile != '') {
        wm_debug("Writing HTML to $htmlfile\n");

        $fd = fopen($htmlfile, 'w');
        fwrite($fd, '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>');
        if ($map->htmlstylesheet != '') {
            fwrite($fd, '<link rel="stylesheet" type="text/css" href="' . $map->htmlstylesheet . '" />');
        }
        fwrite($fd, '<meta http-equiv="refresh" content="300" /><title>' . $map->ProcessString($map->title, $map) . '</title></head><body>');

        if ($map->htmlstyle == "overlib") {
            fwrite($fd, "<div id=\"overDiv\" style=\"position:absolute; visibility:hidden; z-index:1000;\"></div>\n");
            fwrite($fd, "<script type=\"text/javascript\" src=\"overlib.js\"><!-- overLIB (c) Erik Bosrup --></script> \n");
        }

        fwrite($fd, $map->MakeHTML());
        fwrite($fd, '<hr /><span id="byline">Network Map created with <a href="http://www.network-weathermap.com/?vs=' . $WEATHERMAP_VERSION . '">PHP Network Weathermap v' . $WEATHERMAP_VERSION . '</a></span></body></html>');
        fclose($fd);
    }

    if ($getOpt->getOption('dump-config') != '') {
        $map->WriteConfig($getOpt->getOption('dump-config'));
    }

    if ($getOpt->getOption('dump-json') != '') {
        print "===\n";
        $fd = fopen($getOpt->getOption('dump-json'), "w");
        fputs($fd, $map->getJSONConfig());
        fclose($fd);
        print "===\n";
    }

    if ($getOpt->getOption('stats') === 1) {
        $map->DumpStats();
    }

    if ($map->dataoutputfile != '') {
        $map->WriteDataFile($map->dataoutputfile);
    }

    if ($getOpt->getOption('dump-after') === 1) {
        print_r($map);
    }

    if ($getOpt->getOption('setdebug') === 1) {
        foreach ($map->buildAllItemsList() as $item) {
            print "$item->name :\n";
            foreach ($item->hints as $n => $v) {
                print "  SET $n = $v\n";
            }
            foreach ($item->notes as $n => $v) {
                print "  -> $n = $v\n";
            }
            print "\n";
        }
    }
} else {
    die("\n\nCould not read Weathermap config file. No output produced. Maybe try --help?\n");
}

function my_assert_handler($file, $line, $code)
{
    echo "Assertion Failed:
        File $file
        Line $line
        Code $code";
    debug_print_backtrace();
    exit();
}

/// vim:ts=4:sw=4:
